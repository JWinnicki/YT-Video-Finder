{"version":3,"sources":["components/Icon/sprite.svg","components/Icon/Icon.js","components/Spinner/Spinner.js","axios-yt.js","components/Input/Input.js","store/actions/videos.js","store/actions/actionTypes.js","api-key.js","components/VideoItem/VideoItem.js","components/VideosList/VideosList.js","components/ShowVideo/ShowVideo.js","App.js","serviceWorker.js","store/reducers/videosReducer.js","index.js"],"names":["module","exports","Icon","props","xmlnsXlink","xmlns","className","icon","color","size","rotate","xlinkHref","sprite","Spinner","axios","create","baseURL","Input","React","memo","useState","term","setTerm","onSubmitHandler","e","preventDefault","onFetchVideos","location","pathname","history","push","onSubmit","type","placeholder","value","onChange","target","loading","error","onClick","withRouter","connect","state","dispatch","a","youtube","get","params","q","key","part","maxResults","response","videos","data","items","console","log","message","fetchVideos","onGetVideoDetails","id","title","getVideoDetails","to","alt","src","url","VideosList","filteredList","filter","el","videoId","length","map","snippet","thumbnails","default","ShowVideo","allowFullScreen","path","component","exact","Boolean","window","hostname","match","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9ce0fd6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.ac940cce.svg\";","import React from 'react';\r\n\r\nimport './Icon.scss';\r\nimport sprite from './sprite.svg';\r\n\r\nconst Icon = props => {\r\n    \r\n    return (\r\n        <svg \r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className={`icon-${props.icon} ${props.color ? props.color : 'black'} ${props.size} ${props.rotate ? props.rotate : null}`}\r\n        >\r\n            <use xlinkHref={`${sprite}#${props.icon}`} />\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Icon;","import React from 'react';\r\n\r\nimport './Spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"lds-dual-ring\"></div>\r\n    );\r\n}\r\n\r\nexport default Spinner","import axios from 'axios';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://www.googleapis.com/youtube/v3'\r\n});","import React, { useState } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Icon from '../Icon/Icon';\r\nimport './Input.scss';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport { fetchVideos } from '../../store/actions/videos';\r\n\r\n\r\nconst Input = React.memo(props => {\r\n    const [ term, setTerm ] = useState('');\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        if(term !== '') {\r\n            props.onFetchVideos(term);\r\n            if(props.location.pathname !== '/' ) {\r\n                props.history.push('/');\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderIcon = () => {\r\n        if(props.loading && !props.error) {\r\n            return <Spinner />\r\n        } else {\r\n            return (\r\n                <button className='Input-icon' type='submit' onClick={e => onSubmitHandler(e)}>\r\n                    <Icon size='small' icon='magnifier'  />\r\n                </button>\r\n            );\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={e => onSubmitHandler(e)}>\r\n            <div className='Input'>\r\n                <input className='Input-input' type='text' placeholder='Search for video!' value={term} onChange={e => setTerm(e.target.value)} />\r\n                {renderIcon()}\r\n            </div>\r\n        </form>\r\n    );\r\n})\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchVideos: term => dispatch(fetchVideos(term))\r\n    }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Input));","import * as actionTypes from './actionTypes';\r\nimport KEY from '../../api-key';\r\nimport youtube from '../../axios-yt';\r\n\r\nexport const fetchVideosStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_VIDEOS_START\r\n    }\r\n}\r\n\r\nexport const fetchVideosFail = error => {\r\n    return {\r\n        type: actionTypes.FETCH_VIDEOS_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const fetchVideosSuccess = videos => {\r\n    return {\r\n        type: actionTypes.FETCH_VIDEOS_SUCCESS,\r\n        videos: videos\r\n    }\r\n}\r\n\r\nexport const fetchVideos = term => {\r\n    return async dispatch => {\r\n        dispatch(fetchVideosStart());\r\n        try {\r\n            const response = await youtube.get('/search',{\r\n                params: {\r\n                    q: term,\r\n                    key: KEY,\r\n                    part: 'snippet',\r\n                    maxResults: 5,\r\n                    type: 'video'\r\n                }\r\n            });\r\n            dispatch(fetchVideosSuccess(response.data.items));\r\n        } catch(error) {\r\n            console.log(error.message);\r\n            dispatch(fetchVideosFail('Something went wrong'));\r\n        }\r\n    }\r\n}\r\n\r\nexport const getVideoDetails = (id, title) => {\r\n    return {\r\n        type: actionTypes.GET_VIDEO_DETAILS,\r\n        id: id,\r\n        title: title\r\n    }\r\n}","//Videos\r\nexport const FETCH_VIDEOS_START = 'FETCH_VIDEOS_START';\r\nexport const FETCH_VIDEOS_SUCCESS = 'FETCH_VIDEOS_SUCCESS';\r\nexport const FETCH_VIDEOS_FAIL = 'FETCH_VIDEOS_FAIL';\r\n\r\nexport const GET_VIDEO_DETAILS = 'GET_VIDEO_DETAILS';\r\n","const KEY = 'AIzaSyCac4hqRRX9Dk8CWncSeMH7J8zDv-BAUaM';\r\n\r\nexport default KEY;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nimport './VideoItem.scss';\r\nimport { getVideoDetails } from '../../store/actions/videos';\r\n\r\nconst VideoItem = props => {\r\n\r\n    return (\r\n        <li className='VideoItem'>\r\n            <Link to={`/show/${props.id}`} className='VideoItem-link' onClick={() => props.onGetVideoDetails(props.id, props.title)}>\r\n                <div className='VideoItem-imgDiv'>\r\n                    <img alt={props.title} src={props.url} className='VideoItem-img' />\r\n                </div>\r\n                <div className='VideoItem-titleDiv'>\r\n                    <p className='VideoItem-title'>{props.title}</p>\r\n                </div>\r\n            </Link>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onGetVideoDetails: (id, title) => dispatch(getVideoDetails(id, title))\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(VideoItem);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './VideosList.scss';\r\nimport VideoItem from '../VideoItem/VideoItem';\r\n\r\n\r\nconst VideosList = React.memo(props => {\r\n    const videosList = props.videos;\r\n    const filteredList = videosList.filter(el => el.id.videoId !== props.id)\r\n\r\n    const renderItems = () => {\r\n        \r\n        if(filteredList.length > 0) {\r\n            return filteredList.map(el => {\r\n                return <VideoItem key={el.id.videoId} id={el.id.videoId} title={el.snippet.title} url={el.snippet.thumbnails.default.url} />\r\n            });\r\n        } else if(props.error && !props.loading) {\r\n            return <p className='VideosList-errorMsg'>{props.error}</p>\r\n        }\r\n    }    \r\n\r\n    return (\r\n        <div className={`VideosList`}>\r\n            <ul className='VideosList-list'>\r\n                {renderItems()}\r\n            </ul>\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        videos: state.videos,\r\n        id: state.id,\r\n        loading: state.loading,\r\n        error: state.error\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(VideosList);","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './ShowVideo.scss';\r\nimport VideosList from '../VideosList/VideosList';\r\n\r\n\r\nconst ShowVideo = React.memo(props => {\r\n\r\n    const renderComponent = () => {\r\n        if(props.id === null) {\r\n            return <Redirect to='/' />\r\n        } else {\r\n            return(\r\n                <div className='ShowVideo'>\r\n                    <div className='ShowVideo-videoDiv'>\r\n                        <div className='ShowVideo-iframeDiv'>\r\n                            <iframe \r\n                                src={`https://www.youtube.com/embed/${props.id}`}\r\n                                title='video player'\r\n                                allowFullScreen\r\n                                className='ShowVideo-iframe'\r\n                            />\r\n                        </div>\r\n                        <h2 className='ShowVideo-videoTitle'>{props.title}</h2>\r\n                    </div>\r\n                    <div className='ShowVideo-listDiv'>\r\n                        <VideosList />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {renderComponent()}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        id: state.id,\r\n        title: state.title\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ShowVideo);\r\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport './App.scss';\nimport Input from './components/Input/Input';\nimport VideosList from './components/VideosList/VideosList';\nimport ShowVideo from './components/ShowVideo/ShowVideo';\n\nconst App = props => {\n\n  return (\n    <div className=\"App\">\n      <div className={`App-searchBar ${props.videos.length > 0 || props.error ? `App-searchBar--active` : ``}`}>\n        <Input />\n      </div>\n      <div className={`App-container ${props.videos.length > 0 || props.error ? `App-container--active` : ``}`}>\n        <Switch>\n          <Route path={`/show/:id`} component={ShowVideo} />\n          <Route path=\"/\" exact component={VideosList} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    videos: state.videos,\n    error: state.error\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null,\r\n    videos: [],\r\n    id: null,\r\n    title: ''\r\n}\r\n\r\nexport default (state=initialState, action) => {\r\n    switch(action.type) {\r\n        case actionTypes.FETCH_VIDEOS_START:\r\n            return {\r\n                ...state,\r\n                loading: true,\r\n                error: null\r\n            }\r\n        case actionTypes.FETCH_VIDEOS_FAIL:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                error: action.error\r\n            }\r\n        case actionTypes.FETCH_VIDEOS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                videos: action.videos\r\n            }\r\n        case actionTypes.GET_VIDEO_DETAILS:\r\n            return {\r\n                ...state,\r\n                id: action.id,\r\n                title: action.title\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport reducers from './store/reducers/videosReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n    reducers,\n    composeEnhancers(applyMiddleware(thunk))\n);\n\nconst app = (\n    <Provider store={store}>\n            <HashRouter>\n                <App />\n            </HashRouter>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}